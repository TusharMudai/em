[1mdiff --cc backend/controllers/authController.js[m
[1mindex 010cb3a,c2f02a5..0000000[m
[1m--- a/backend/controllers/authController.js[m
[1m+++ b/backend/controllers/authController.js[m
[36m@@@ -1,66 -1,107 +1,129 @@@[m
[31m -const User = require('../models/User');[m
  const jwt = require('jsonwebtoken');[m
[31m -const bcrypt = require('bcrypt');[m
[31m -[m
[31m -const generateToken = (id) => {[m
[31m -    return jwt.sign({ id }, process.env.JWT_SECRET, { expiresIn: '30d' });[m
[31m -};[m
[32m +const bcrypt = require('bcryptjs');[m
[32m +const User = require('../models/User');[m
  [m
[31m -// Register a new employee[m
[32m +// Register User[m
  const registerUser = async (req, res) => {[m
[32m++<<<<<<< HEAD[m
[32m +  const { name, email, password, position, department, salary, joiningDate } = req.body;[m
[32m++=======[m
[32m+     const { name, email, password, position, department, salary, joiningDate } = req.body;[m
[32m+     try {[m
[32m+         const user = await mongoose.connection.db.collection("employeedb").insertOne({name,email,password,position,department,salary,joiningDate });[m
[32m+         if (userExists) return res.status(400).json({ message: 'User already exists' });[m
[32m++>>>>>>> 293b440 (op)[m
  [m
[31m -        const user = await User.create({ name, email, password, position, department, salary, joiningDate });[m
[31m -        res.status(201).json({ [m
[31m -            id: user.id, [m
[31m -            name: user.name, [m
[31m -            email: user.email, [m
[31m -            position: user.position, [m
[31m -            department: user.department, [m
[31m -            salary: user.salary, [m
[31m -            joiningDate: user.joiningDate, [m
[31m -            token: generateToken(user.id) [m
[31m -        });[m
[31m -    } catch (error) {[m
[31m -        res.status(500).json({ message: error.message });[m
[32m +  try {[m
[32m +    if (!name || !email || !password) {[m
[32m +      return res.status(400).json({ message: 'Name, email, and password are required' });[m
      }[m
[32m +[m
[32m +    if (await User.findOne({ email })) {[m
[32m +      return res.status(400).json({ message: 'User already exists' });[m
[32m +    }[m
[32m +[m
[32m +    const hashedPassword = await bcrypt.hash(password, await bcrypt.genSalt(10));[m
[32m +    const createdUser = await User.create({ [m
[32m +      name, [m
[32m +      email, [m
[32m +      password: hashedPassword, [m
[32m +      position, [m
[32m +      department, [m
[32m +      salary, [m
[32m +      joiningDate: joiningDate ? new Date(joiningDate) : undefined [m
[32m +    });[m
[32m +[m
[32m +    res.status(201).json({[m
[32m +      _id: createdUser.id,[m
[32m +      name: createdUser.name,[m
[32m +      email: createdUser.email,[m
[32m +      token: generateToken(createdUser._id),[m
[32m +    });[m
[32m +  } catch (error) {[m
[32m +    res.status(500).json({ message: 'Error during registration', error: error.message });[m
[32m +  }[m
  };[m
  [m
[31m -// Login an employee[m
[32m +// Login User[m
  const loginUser = async (req, res) => {[m
[32m++<<<<<<< HEAD[m
[32m +  const { email, password } = req.body;[m
[32m +[m
[32m +  try {[m
[32m +    const existingUser = await User.findOne({ email }); // Renamed variable[m
[32m +    if (existingUser && await bcrypt.compare(password, existingUser.password)) {[m
[32m +      res.json({[m
[32m +        _id: existingUser.id,[m
[32m +        name: existingUser.name,[m
[32m +        email: existingUser.email,[m
[32m +        token: generateToken(existingUser._id),[m
[32m +      });[m
[32m +    } else {[m
[32m +      res.status(401).json({ message: 'Invalid credentials' });[m
[32m++=======[m
[32m+     const { email, password } = req.body;[m
[32m+     try {[m
[32m+         const user = await mongoose.connection.db.collection("employeedb").findOne({ email });[m
[32m+         if (user && (await bcrypt.compare(password, user.password))) {[m
[32m+             res.json({ [m
[32m+                 id: user.id, [m
[32m+                 name: user.name, [m
[32m+                 email: user.email, [m
[32m+                 position: user.position, [m
[32m+                 department: user.department, [m
[32m+                 salary: user.salary, [m
[32m+                 joiningDate: user.joiningDate, [m
[32m+                 token: generateToken(user.id) [m
[32m+             });[m
[32m+         } else {[m
[32m+             res.status(401).json({ message: 'Invalid email or password' });[m
[32m+         }[m
[32m+     } catch (error) {[m
[32m+         res.status(500).json({ message: error.message });[m
[32m++>>>>>>> 293b440 (op)[m
      }[m
[32m +  } catch (error) {[m
[32m +    res.status(500).json({ message: 'Login failed', error: error.message });[m
[32m +  }[m
  };[m
  [m
[31m -// Get employee profile[m
[31m -const getProfile = async (req, res) => {[m
[31m -    try {[m
[31m -        const user = await User.findById(req.user.id);[m
[31m -        if (!user) {[m
[31m -            return res.status(404).json({ message: 'User not found' });[m
[31m -        }[m
[31m -[m
[31m -        res.status(200).json({[m
[31m -            name: user.name,[m
[31m -            email: user.email,[m
[31m -            position: user.position,[m
[31m -            department: user.department,[m
[31m -            salary: user.salary,[m
[31m -            joiningDate: user.joiningDate,[m
[31m -        });[m
[31m -    } catch (error) {[m
[31m -        res.status(500).json({ message: 'Server error', error: error.message });[m
[31m -    }[m
[32m +// Generate Token[m
[32m +const generateToken = (id) => {[m
[32m +  return jwt.sign({ id }, process.env.JWT_SECRET || 'fallback_secret_key', { expiresIn: '30d' });[m
  };[m
  [m
[32m++<<<<<<< HEAD[m
[32m +module.exports = { registerUser, loginUser };[m
[32m++=======[m
[32m+ // Update employee profile[m
[32m+ const updateUserProfile = async (req, res) => {[m
[32m+     try {[m
[32m+         const user = await User.findById(req.user.id);[m
[32m+         if (!user) return res.status(404).json({ message: 'User not found' });[m
[32m+ [m
[32m+         const { name, email, position, department, salary, joiningDate } = req.body;[m
[32m+         user.name = name || user.name;[m
[32m+         user.email = email || user.email;[m
[32m+         user.position = position || user.position;[m
[32m+         user.department = department || user.department;[m
[32m+         user.salary = salary || user.salary;[m
[32m+         user.joiningDate = joiningDate || user.joiningDate;[m
[32m+ [m
[32m+         const updatedUser = await user.save();[m
[32m+         res.json({ [m
[32m+             id: updatedUser.id, [m
[32m+             name: updatedUser.name, [m
[32m+             email: updatedUser.email, [m
[32m+             position: updatedUser.position, [m
[32m+             department: updatedUser.department, [m
[32m+             salary: updatedUser.salary, [m
[32m+             joiningDate: updatedUser.joiningDate, [m
[32m+             token: generateToken(updatedUser.id) [m
[32m+         });[m
[32m+     } catch (error) {[m
[32m+         res.status(500).json({ message: error.message });[m
[32m+     }[m
[32m+ };[m
[32m+ [m
[32m+ module.exports = { registerUser, loginUser, updateUserProfile, getProfile };[m
[32m++>>>>>>> 293b440 (op)[m
[1mdiff --cc backend/models/User.js[m
[1mindex 69110e4,ebed9a7..0000000[m
[1m--- a/backend/models/User.js[m
[1m+++ b/backend/models/User.js[m
[36m@@@ -1,27 -1,11 +1,36 @@@[m
  const mongoose = require('mongoose');[m
[32m++<<<<<<< HEAD[m
[32m +const bcrypt = require('bcryptjs');[m
[32m +[m
[32m +const userSchema = new mongoose.Schema({[m
[32m +    name: { type: String, required: true },[m
[32m +    email: { type: String, required: true, unique: true },[m
[32m +    password: { type: String, required: true },[m
[32m++=======[m
[32m+ const UserSchema = new mongoose.Schema({[m
[32m+     name: String,[m
[32m+     email: { type: String, unique: true },[m
[32m+     password: String,[m
[32m++>>>>>>> 293b440 (op)[m
      position: String,[m
      department: String,[m
      salary: Number,[m
      joiningDate: Date[m
[32m++<<<<<<< HEAD[m
[32m +});[m
[32m +[m
[32m +// Auto-hash password before saving[m
[32m +userSchema.pre('save', async function(next) {[m
[32m +    if (!this.isModified('password')) return next();[m
[32m +    [m
[32m +    try {[m
[32m +        const salt = await bcrypt.genSalt(10);[m
[32m +        this.password = await bcrypt.hash(this.password, salt);[m
[32m +        next();[m
[32m +    } catch (err) {[m
[32m +        next(err);[m
[32m +    }[m
[32m++=======[m
[32m++>>>>>>> 293b440 (op)[m
  });[m
[31m- [m
[31m- module.exports = mongoose.model('User', userSchema);[m
[32m+ module.exports = mongoose.model('User', UserSchema, 'employeedb');[m
